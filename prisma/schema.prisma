generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["referentialIntegrity"]
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model User {
  id            String          @id @default(cuid())
  name          String?
  email         String?         @unique
  emailVerified DateTime?
  image         String?
  role          User_role       @default(USER)
  balance       BigInt          @default(0)
  accounts      Account[]
  userSettings  UserSettings?
  likedPosts    UserLikedPost[]
  comments      Comment[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Post {
  id        Int             @id @default(autoincrement())
  createdAt DateTime        @default(now())
  updatedAt DateTime        @updatedAt
  published Boolean         @default(false)
  title     String
  content   String?         @db.Text
  authorId  String
  likedBy   UserLikedPost[]
  comments  Comment[]

  @@index([createdAt])
}

model Comment {
  id      Int    @id @default(autoincrement())
  content String @db.Text
  postId  Int
  post    Post   @relation(fields: [postId], references: [id], onDelete: Cascade)
  userId  String
  user    User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index(postId)
  @@index(userId)
}

model UserLikedPost {
  post   Post   @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId Int
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String

  @@id([postId, userId])
}

model UserSettings {
  id           String  @id @default(cuid())
  userId       String  @unique
  emailUpdates Boolean @default(false)
  user         User    @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum User_role {
  USER
  ADMIN
}
